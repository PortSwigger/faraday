package burp.faraday;

import burp.*;
import burp.faraday.models.vulnerability.Host;
import burp.faraday.models.vulnerability.Service;
import burp.faraday.models.vulnerability.Vulnerability;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;

public class VulnerabilityMapper {

    private static IExtensionHelpers helpers;

    public static void setHelpers(IExtensionHelpers helpers) {
        VulnerabilityMapper.helpers = helpers;
    }

    public static Vulnerability fromIssue(IScanIssue issue) {
        final Host host = getHostFromIssue(issue);
        final Service service = getServiceFromIssue(issue);

        final Vulnerability vulnerability = getVulnerabilityFromIssue(issue);

        vulnerability.setHost(host);
        vulnerability.setService(service);

        return vulnerability;
    }

    public static Vulnerability fromRequest(IHttpRequestResponse message) {
        return null;
    }

    private static Host getHostFromIssue(IScanIssue issue) {
        final Host host = new Host();

        final String hostname = issue.getUrl().getHost();

        host.setHostnames(new String[]{hostname});

        String ip = hostname;
        try {
            ip = InetAddress.getByName(issue.getHttpService().getHost()).getHostAddress();
        } catch (UnknownHostException ignored) {

        }
        host.setIp(ip);

        return host;
    }

    private static Service getServiceFromIssue(IScanIssue issue) {

        final Service service = new Service();

        service.setProtocol(issue.getUrl().getProtocol());
        service.setPorts(new int[]{issue.getUrl().getPort()});
        service.setStatus("open");

        return service;
    }

    private static Vulnerability getVulnerabilityFromIssue(IScanIssue issue) {
        final Vulnerability vulnerability = new Vulnerability();

        vulnerability.setName(issue.getIssueName());
        vulnerability.setSeverity(parseSeverity(issue));
        vulnerability.setResolution(parseResolution(issue));
        vulnerability.setDescription(parseDescription(issue));
        vulnerability.setPath(issue.getUrl().getPath());
        vulnerability.setWebsite(issue.getUrl().toString());

        if (issue.getHttpMessages().length > 0) {
            vulnerability.setType("VulnerabilityWeb");

            IHttpRequestResponse message = issue.getHttpMessages()[0];

            IRequestInfo requestInfo = helpers.analyzeRequest(message);

            final String query = requestInfo.getUrl().getQuery() != null ? requestInfo.getUrl().getQuery() : "";

            vulnerability.setRequest(new String(message.getRequest()));
            vulnerability.setResponse(new String(message.getResponse()));
            vulnerability.setMethod(requestInfo.getMethod());
            vulnerability.setParams(parseParameters(requestInfo.getParameters()));
            vulnerability.setQuery(query);
        }

        return vulnerability;
    }

    private static String parseSeverity(IScanIssue issue) {
        if (issue.getSeverity().equals("False positive")) {
            return "unclassified";
        }

        if (issue.getSeverity().equals("Information")) {
            return "informational";
        }

        return issue.getSeverity().toLowerCase();
    }

    private static String parseDescription(IScanIssue issue) {
        StringBuilder description = new StringBuilder();

        if (issue.getIssueDetail() != null && !issue.getIssueDetail().isEmpty()) {
            description.append("Detail\n");
            description.append(issue.getIssueDetail());
        }

        String background = issue.getIssueBackground();
        if (background != null && !background.isEmpty()) {
            description.append("Background\n");
            description.append(background);
        }

        return description.toString().replaceAll("<(/p|br/|/li|/ul|/ol)>", "\n").replaceAll("<li>", "* ").replaceAll("</?[^>]*>", "");
    }

    private static String parseParameters(final List<IParameter> parameterList) {
        final StringBuilder params = new StringBuilder();

        for (IParameter p : parameterList) {
            params.append(p.getType());
            params.append(":");
            params.append(p.getName());
            params.append("=");
            params.append(p.getValue());
            params.append(",");
        }

        return params.toString();
    }

    private static String parseResolution(IScanIssue issue) {
        return issue.getRemediationBackground().replaceAll("<(/p|br/|/li)>", "\n").replaceAll("<li>", "* ").replaceAll("</?[^>]*>", "");
    }

}
